//// Created by mrx on 2022/9/28.//#include <vector>#include <algorithm>#include <iostream>#include <array>#include <queue>#include <iomanip>using ll = long long;int main() {	std::ios::sync_with_stdio(false);	std::cin.tie(nullptr);	std::cout.tie(nullptr);	int n;	std::cin >> n;	std::vector<int> a(n);	for (int i = 0; i < n; ++i)std::cin >> a[i];	std::vector<std::vector<int>> G(n);	std::vector<int> deg(n);	for (int i = 0; i < n; ++i) {		int u, v;		std::cin >> u >> v;		G[u].push_back(v);		G[v].push_back(u);		deg[u]++, deg[v]++;	}	std::vector<bool> in_ring(n);	std::queue<int> q;	for (int i = 0; i < n; ++i) {		if (deg[i] == 1)q.push(i);	}	while (!q.empty()) {		auto u = q.front();		q.pop();		deg[u]--;		for (auto v: G[u]) {			deg[v]--;			if (deg[v] == 1)q.push(v);		}	}	std::vector<int> ring;	std::function<void(int)> dfs2 = [&](int u) {		ring.push_back(u);		deg[u]--;		in_ring[u] = 1;		for (auto v: G[u]) {			if (deg[v] == 2)dfs2(v);		}	};	for (int i = 0; i < n; ++i) {		if (deg[i] == 2) {			dfs2(i);			break;		}	}	std::vector<std::array<int, 2>> dp(n);	std::function<void(int, int)> dfs1 = [&](int u, int fa) {		dp[u][1] = a[u], dp[u][0] = 0;		for (auto v: G[u]) {			if (v == fa || in_ring[v])continue;			dfs1(v, u);			dp[u][0] += std::max(dp[v][1], dp[v][0]);			dp[u][1] += dp[v][0];		}	};	for (auto v: ring)dfs1(v, v);	int cnt = ring.size();	std::vector<std::array<int, 2>> f(cnt);	f[0][0] = dp[ring[0]][0];	for (int i = 1; i < cnt; ++i) {		f[i][0] = dp[ring[i]][0] + std::max(f[i - 1][0], f[i - 1][1]);		f[i][1] = dp[ring[i]][1] + f[i - 1][0];	}	int ans = std::max(f[cnt - 1][0], f[cnt - 1][1]);	f[0][1] = dp[ring[0]][1];	for (int i = 1; i < cnt; ++i) {		f[i][0] = std::max(f[i - 1][0], f[i - 1][1]) + dp[ring[i]][0];		f[i][1] = f[i - 1][0] + dp[ring[i]][1];	}	ans = std::max(ans, f[cnt - 1][0]);	double k;	std::cin >> k;	std::cout << std::fixed << std::setprecision(1) << k * ans << '\n';	return 0;}